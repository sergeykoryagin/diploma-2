import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker/locale/ru';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç—ã
  const users = await prisma.user.findMany();
  const routes = await prisma.route.findMany();
  
  if (users.length === 0 || routes.length === 0) {
    console.error('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏!');
    return;
  }
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.comment.deleteMany({});
  await prisma.like.deleteMany({});
  await prisma.favorite.deleteMany({});
  
  console.log('üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (1-–π —É—Ä–æ–≤–µ–Ω—å)
  const totalComments = 150;
  const rootComments = [];
  
  console.log(`üí¨ –°–æ–∑–¥–∞–µ–º ${totalComments} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...`);
  
  for (let i = 0; i < totalComments; i++) {
    const randomUser = users[Math.floor(Math.random() * users.length)];
    const randomRoute = routes[Math.floor(Math.random() * routes.length)];
    
    const comment = await prisma.comment.create({
      data: {
        text: faker.lorem.paragraph(),
        userId: randomUser.id,
        routeId: randomRoute.id,
      },
    });
    
    rootComments.push(comment);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (2-–π —É—Ä–æ–≤–µ–Ω—å)
  console.log('üí¨ –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...');
  
  for (const rootComment of rootComments) {
    // 40% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    if (Math.random() < 0.4) {
      const repliesCount = Math.floor(Math.random() * 3) + 1; // 1-3 –æ—Ç–≤–µ—Ç–∞
      
      for (let i = 0; i < repliesCount; i++) {
        const randomUser = users[Math.floor(Math.random() * users.length)];
        
        await prisma.comment.create({
          data: {
            text: faker.lorem.sentences({ min: 1, max: 3 }),
            userId: randomUser.id,
            routeId: rootComment.routeId,
            parentId: rootComment.id,
          },
        });
      }
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤
  console.log('üëç –°–æ–∑–¥–∞–µ–º –ª–∞–π–∫–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
  
  const likesData = [];
  
  for (const route of routes) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ (–æ—Ç 0 –¥–æ 70% –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    const likesCount = Math.floor(Math.random() * (users.length * 0.7));
    const shuffledUsers = [...users].sort(() => 0.5 - Math.random());
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ likesCount –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ª–∞–π–∫–æ–≤
    const usersWhoLike = shuffledUsers.slice(0, likesCount);
    
    for (const user of usersWhoLike) {
      likesData.push({
        userId: user.id,
        routeId: route.id,
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –≤ —Å–∞–º–æ–º –º–∞—Ä—à—Ä—É—Ç–µ
    await prisma.route.update({
      where: { id: route.id },
      data: { likesCount }
    });
  }
  
  // –°–æ–∑–¥–∞–µ–º –ª–∞–π–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ
  await prisma.like.createMany({
    data: likesData,
    skipDuplicates: true,
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
  console.log('‚≠ê –°–æ–∑–¥–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã...');
  
  const favoritesData = [];
  
  for (const user of users) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç 0 –¥–æ 30% –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
    const favoritesCount = Math.floor(Math.random() * (routes.length * 0.3));
    const shuffledRoutes = [...routes].sort(() => 0.5 - Math.random());
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ favoritesCount –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const favoriteRoutes = shuffledRoutes.slice(0, favoritesCount);
    
    for (const route of favoriteRoutes) {
      favoritesData.push({
        userId: user.id,
        routeId: route.id,
      });
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω–æ
  await prisma.favorite.createMany({
    data: favoritesData,
    skipDuplicates: true,
  });
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const commentsCount = await prisma.comment.count();
  const likesCount = await prisma.like.count();
  const favoritesCount = await prisma.favorite.count();
  
  console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìä –°–æ–∑–¥–∞–Ω–æ:
  - ${commentsCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  - ${likesCount} –ª–∞–π–∫–æ–≤
  - ${favoritesCount} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`);
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 