generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя – используется как для локальной аутентификации (например, через credentials),
// так и для OAuth (например, через Yandex). Рекомендуется использовать cuid() для id.
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  image          String?
  tags           String[]  @db.VarChar(50) // Теги пользователя для рекомендательной системы
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Связи с другими моделями (используются адаптером Auth.js)
  accounts       Account[]
  sessions       Session[]
  
  // Ваши дополнительные модели (например, маршруты)
  routes         Route[]
  
  // Новые связи для комментариев, лайков и избранного
  comments       Comment[]     // Комментарии, оставленные пользователем
  likes          Like[]        // Лайки, поставленные пользователем
  favorites      Favorite[]    // Маршруты, добавленные в избранное

  @@map("users")
}

// Модель для хранения данных учётных записей, связанных с OAuth провайдерами (Yandex, и др.)
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Модель для хранения сессий пользователей.
// Если вы используете стратегию "database" для сессий, то данные сессии будут сохраняться в этой таблице.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Модель для верификационных токенов (например, для passwordless или email верификации)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Модель маршрута, созданного пользователями (ваша текущая модель)
model Route {
  id          String       @id @default(cuid())
  title       String
  description String?
  tags        String[]     @db.VarChar(50) // Теги маршрута
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Связь: маршрут создаётся пользователем (автором)
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  
  // Каждый маршрут может содержать несколько точек
  points      RoutePoint[]
  
  // Новые связи для комментариев, лайков и избранного
  comments    Comment[]    // Комментарии к маршруту
  likes       Like[]       // Лайки маршрута
  favorites   Favorite[]   // Пользователи, добавившие маршрут в избранное
  
  // Виртуальные поля для агрегации (не сохраняются в БД)
  likesCount  Int          @default(0) // Количество лайков

  @@map("routes")
}

// Модель точки маршрута
model RoutePoint {
  id          String   @id @default(cuid())
  routeId     String
  latitude    Float
  longitude   Float
  title       String?
  orderIndex  Int?
  
  route       Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@map("route_points")
}

// Модель комментария к маршруту
model Comment {
  id          String   @id @default(cuid())
  text        String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связи с пользователем и маршрутом
  userId      String
  routeId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  route       Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  // Родительский комментарий (для вложенных комментариев/ответов)
  parentId    String?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Модель лайка маршрута
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Связи с пользователем и маршрутом
  userId    String
  routeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  // Уникальный индекс для предотвращения дублирования лайков
  @@unique([userId, routeId])
  @@map("likes")
}

// Модель избранных маршрутов
model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Связи с пользователем и маршрутом
  userId    String
  routeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  // Уникальный индекс для предотвращения дублирования
  @@unique([userId, routeId])
  @@map("favorites")
}